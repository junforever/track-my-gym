generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model assets {
  id                  String                @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name                String                @unique(map: "name") @db.VarChar(100)
  description         String?               @db.Text
  category            String?               @db.VarChar(50)
  brand               String?               @db.VarChar(50)
  imagePath           String?               @map("image_path") @db.VarChar(255)
  createdAt           DateTime?             @default(now()) @db.DateTime(0)
  updatedAt           DateTime?             @default(now()) @db.DateTime(0)
  equipment_inventory equipment_inventory[]
  purchase_items      purchase_items[]
  sale_inventory      sale_inventory[]
}

model certificates {
  id               String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  certificateType  String    @map("certificate_type") @db.VarChar(50)
  description      String?   @db.VarChar(255)
  certificateText  String?   @map("certificate_text") @db.Text
  createdAt        DateTime? @default(now()) @db.DateTime(0)
  updatedAt        DateTime? @default(now()) @db.DateTime(0)
}

model client_attendance {
  id                      String                @id @default(dbgenerated("(uuid())")) @db.Char(36)
  serviceRegistrationId   String                @map("service_registration_id") @db.Char(36)
  attendanceDate          DateTime              @map("attendance_date") @db.Date
  checkInTime             DateTime?             @map("check_in_time") @db.Time(0)
  checkOutTime            DateTime?             @map("check_out_time") @db.Time(0)
  createdAt               DateTime?             @default(now()) @db.DateTime(0)
  service_registrations   service_registrations @relation(fields: [serviceRegistrationId], references: [id], onUpdate: Restrict, map: "fk_attendance_registration")

  @@index([serviceRegistrationId], map: "fk_attendance_registration")
}

model client_documents {
  id            String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  clientId      String    @map("client_id") @db.Char(36)
  documentType  String    @map("document_type") @db.VarChar(50)
  filePath      String    @map("file_path") @db.VarChar(255)
  validUntil    DateTime? @map("valid_until") @db.Date
  comments      String?   @db.Text
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
  clients       clients   @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_client_doc_client")

  @@unique([clientId, documentType], map: "client_id")
}

model client_payments {
  id                 String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  clientId           String    @map("client_id") @db.Char(36)
  serviceId          String?   @map("service_id") @db.Char(36)
  paymentDate        DateTime  @map("payment_date") @db.Date
  amount             Decimal   @db.Decimal(10, 2)
  paymentMethod      String    @map("payment_method") @db.VarChar(50)
  proofPaymentPath   String?   @map("proof_payment_path") @db.VarChar(255)
  comments           String?   @db.Text
  createdAt          DateTime? @default(now()) @db.DateTime(0)
  updatedAt          DateTime? @default(now()) @db.DateTime(0)
  clients            clients   @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_payment_client")
  services           services? @relation(fields: [serviceId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_payment_service")

  @@index([clientId], map: "fk_payment_client")
  @@index([serviceId], map: "fk_payment_service")
}

model client_service_levels {
  id               String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  clientId         String    @map("client_id") @db.Char(36)
  serviceId        String    @map("service_id") @db.Char(36)
  level            String    @db.VarChar(50)
  levelStartDate   DateTime  @map("level_start_date") @db.Date
  levelEndDate     DateTime? @map("level_end_date") @db.Date
  comments         String?   @db.Text
  createdAt        DateTime? @default(now()) @db.DateTime(0)
  clients          clients   @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_hist_client")
  services         services  @relation(fields: [serviceId], references: [id], onUpdate: Restrict, map: "fk_hist_service")

  @@index([clientId], map: "fk_hist_client")
  @@index([serviceId], map: "fk_hist_service")
}

model clients {
  id                    String                  @id @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName             String                  @db.VarChar(50)
  lastName              String                  @db.VarChar(50)
  dateOfBirth           DateTime                @db.Date
  gender                String?                 @default("O") @db.VarChar(50)
  phone                 String?                 @db.VarChar(10)
  email                 String?                 @db.VarChar(100)
  address               String?                 @db.Text
  idNumber              String                  @map("id_number") @unique(map: "id_number") @db.VarChar(10)
  guardianId            String?                 @db.Char(36)
  relationship          String?                 @db.VarChar(50)
  registrationDate      DateTime?               @default(dbgenerated("(curdate())")) @db.Date
  createdAt             DateTime?               @default(now()) @db.DateTime(0)
  updatedAt             DateTime?               @default(now()) @db.DateTime(0)
  client_documents      client_documents[]
  client_payments       client_payments[]
  client_service_levels client_service_levels[]
  clients               clients?                @relation("clientsToclients", fields: [guardianId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_client_guardian")
  other_clients         clients[]               @relation("clientsToclients")
  loyalty_records       loyalty_records[]
  service_registrations service_registrations[]
  survey_responses      survey_responses[]

  @@index([guardianId], map: "fk_client_guardian")
}

model employee_documents {
  id            String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  employeeId    String    @map("employee_id") @db.Char(36)
  documentType  String    @map("document_type") @db.VarChar(50)
  filePath      String    @map("file_path") @db.VarChar(255)
  validUntil    DateTime? @map("valid_until") @db.Date
  comments      String?   @db.Text
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
  employees     employees @relation(fields: [employeeId], references: [id], onUpdate: Restrict, map: "fk_emp_doc_employee")

  @@unique([employeeId, documentType], map: "employee_id")
}

model employees {
  id                 String               @id @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName          String               @db.VarChar(50)
  lastName           String               @db.VarChar(50)
  idNumber           String               @map("id_number") @unique(map: "id_number") @db.VarChar(10)
  gender             String?              @db.VarChar(50)
  role               String               @db.VarChar(50)
  phone              String?              @db.VarChar(10)
  email              String?              @db.VarChar(100)
  contractStart      DateTime?            @db.Date
  contractEnd        DateTime?            @db.Date
  status             String               @default("active") @db.VarChar(50)
  hireDate           DateTime?            @db.Date
  createdAt          DateTime?            @default(now()) @db.DateTime(0)
  updatedAt          DateTime?            @default(now()) @db.DateTime(0)
  employee_documents employee_documents[]
  salary_payments    salary_payments[]
  service_schedules  service_schedules[]
}

model equipment_inventory {
  id                    String                  @id @default(dbgenerated("(uuid())")) @db.Char(36)
  assetId               String                  @map("asset_id") @db.Char(36)
  idNumber              String                 @map("id_number") @db.VarChar(50)
  status                String                  @db.VarChar(50)
  acquisitionDate       DateTime?               @map("acquisition_date") @db.Date
  warrantyExpiration    DateTime?               @map("warranty_expiration") @db.Date
  comments              String?                 @db.Text
  createdAt             DateTime?               @default(now()) @db.DateTime(0)
  updatedAt             DateTime?               @default(now()) @db.DateTime(0)
  assets                assets                  @relation(fields: [assetId], references: [id], onUpdate: Restrict, map: "fk_equipinv_asset")
  equipment_maintenance equipment_maintenance[]

  @@index([assetId], map: "fk_equipinv_asset")
}

model equipment_maintenance {
  id                     String              @id @default(dbgenerated("(uuid())")) @db.Char(36)
  equipmentInventoryId   String              @map("equipment_inventory_id") @db.Char(36)
  maintenanceDateStart   DateTime            @map("maintenance_date_start") @db.Date
  reason                 String              @db.VarChar(50)
  cost                   Decimal?            @db.Decimal(10, 2)
  maintenanceStatus      String?             @map("maintenance_status") @db.VarChar(50)
  maintenanceDateEnd     DateTime?           @map("maintenance_date_end") @db.Date
  comments               String?             @db.Text
  equipment_inventory    equipment_inventory @relation(fields: [equipmentInventoryId], references: [id], onUpdate: Restrict, map: "fk_equipmaint_equipment")

  @@index([equipmentInventoryId], map: "fk_equipmaint_equipment")
}

model event_categories {
  id                 String               @id @default(dbgenerated("(uuid())")) @db.Char(36)
  eventId            String               @map("event_id") @db.Char(36)
  categoryName       String               @map("category_name") @db.VarChar(50)
  requirements       String?              @db.Text
  cost               Decimal              @db.Decimal(10, 2)
  comments           String?              @db.Text
  createdAt          DateTime?            @default(now()) @db.DateTime(0)
  updatedAt          DateTime?            @default(now()) @db.DateTime(0)
  events             events               @relation(fields: [eventId], references: [id], onUpdate: Restrict, map: "fk_eventcat_event")
  event_participants event_participants[]

  @@index([eventId], map: "fk_eventcat_event")
}

model event_participants {
  id                String           @id @default(dbgenerated("(uuid())")) @db.Char(36)
  eventCategoryId   String           @map("event_category_id") @db.Char(36)
  participantId     String           @map("participant_id") @db.Char(36)
  participantType   String           @map("participant_type") @db.VarChar(50)
  role              String?          @db.VarChar(50)
  registrationDate  DateTime         @map("registration_date") @db.Date
  createdAt         DateTime?        @default(now()) @db.DateTime(0)
  event_categories  event_categories @relation(fields: [eventCategoryId], references: [id], onUpdate: Restrict, map: "fk_eventpart_category")
  event_payments    event_payments[]
  event_results     event_results[]

  @@index([eventCategoryId], map: "fk_eventpart_category")
}

model event_payments {
  id                   String             @id @default(dbgenerated("(uuid())")) @db.Char(36)
  eventParticipantId   String             @map("event_participant_id") @db.Char(36)
  paymentDate          DateTime           @map("payment_date") @db.Date
  amount               Decimal            @db.Decimal(10, 2)
  paymentMethod        String             @map("payment_method") @db.VarChar(50)
  proofPaymentPath     String?            @map("proof_payment_path") @db.VarChar(255)
  createdAt            DateTime?          @default(now()) @db.DateTime(0)
  updatedAt            DateTime?          @default(now()) @db.DateTime(0)
  event_participants   event_participants @relation(fields: [eventParticipantId], references: [id], onUpdate: Restrict, map: "fk_eventpay_eventparticipant")

  @@index([eventParticipantId], map: "fk_eventpay_eventparticipant")
}

model event_results {
  id                   String             @id @default(dbgenerated("(uuid())")) @db.Char(36)
  eventParticipantId   String             @map("event_participant_id") @db.Char(36)
  position             String             @db.VarChar(50)
  comments             String?            @db.Text
  recordedAt           DateTime           @map("recorded_at") @db.DateTime(0)
  createdAt            DateTime?          @default(now()) @db.DateTime(0)
  event_participants   event_participants @relation(fields: [eventParticipantId], references: [id], onUpdate: Restrict, map: "fk_eventresult_eventparticipant")

  @@index([eventParticipantId], map: "fk_eventresult_eventparticipant")
}

model events {
  id               String             @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name             String             @unique(map: "name") @db.VarChar(100)
  description      String?            @db.Text
  eventType        String             @map("event_type") @db.VarChar(50)
  startDate        DateTime           @map("start_date") @db.Date
  endDate          DateTime?          @map("end_date") @db.Date
  maxPaymentDate   DateTime           @map("max_payment_date") @db.Date
  createdAt        DateTime?          @default(now()) @db.DateTime(0)
  updatedAt        DateTime?          @default(now()) @db.DateTime(0)
  event_categories event_categories[]
}

model expenses {
  id                 String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  description        String    @db.Text
  category           String    @db.VarChar(50)
  amount             Decimal   @db.Decimal(10, 2)
  paymentDate        DateTime  @map("payment_date") @db.Date
  proofPaymentPath   String?   @map("proof_payment_path") @db.VarChar(255)
  comments           String?   @db.Text
  createdAt          DateTime? @default(now()) @db.DateTime(0)
  updatedAt          DateTime? @default(now()) @db.DateTime(0)
}

model issued_certificates {
  id          String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  personId    String    @map("person_id") @db.Char(36)
  personType  String    @map("person_type") @db.VarChar(50)
  issuedDate  DateTime  @map("issued_date") @db.Date
  comments    String?   @db.Text
  createdAt   DateTime? @default(now()) @db.DateTime(0)
}

model loyalty_criteria {
  id              String            @id @default(dbgenerated("(uuid())")) @db.Char(36)
  criterionName   String            @map("criterion_name") @db.VarChar(100)
  description     String?           @db.Text
  createdAt       DateTime?         @default(now()) @db.DateTime(0)
  updatedAt       DateTime?         @default(now()) @db.DateTime(0)
  loyalty_records loyalty_records[]
}

model loyalty_records {
  id               String           @id @default(dbgenerated("(uuid())")) @db.Char(36)
  clientId         String           @map("client_id") @db.Char(36)
  criterionId      String           @map("criterion_id") @db.Char(36)
  comments         String?          @db.Text
  score            Int?
  createdAt        DateTime?        @default(now()) @db.DateTime(0)
  updatedAt        DateTime?        @default(now()) @db.DateTime(0)
  clients          clients          @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_loyalty_client")
  loyalty_criteria loyalty_criteria @relation(fields: [criterionId], references: [id], onUpdate: Restrict, map: "fk_loyalty_criterion")

  @@index([clientId], map: "fk_loyalty_client")
  @@index([criterionId], map: "fk_loyalty_criterion")
}

model promotion_criteria {
  id                String     @id @default(dbgenerated("(uuid())")) @db.Char(36)
  promotionId       String     @map("promotion_id") @db.Char(36)
  criteriaField     String     @map("criteria_field") @db.VarChar(30)
  criteriaOperator  String     @map("criteria_operator") @db.VarChar(10)
  criteriaValue     String     @map("criteria_value") @db.VarChar(10)
  createdAt         DateTime?  @default(now()) @db.DateTime(0)
  updatedAt         DateTime?  @default(now()) @db.DateTime(0)
  promotions        promotions @relation(fields: [promotionId], references: [id], onUpdate: Restrict, map: "fk_promocr_promotion")

  @@index([promotionId], map: "fk_promocr_promotion")
}

model promotions {
  id                    String               @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name                  String               @db.VarChar(100)
  description           String?              @db.Text
  discountValue         Decimal              @map("discount_value") @db.Decimal(10, 2)
  startDate             DateTime             @map("start_date") @db.Date
  endDate               DateTime             @map("end_date") @db.Date
  applicableServiceId   String?              @map("applicable_service_id") @db.Char(36)
  andOperator           Int                  @map("and_operator") @db.TinyInt
  comments              String?              @db.Text
  createdAt             DateTime?            @default(now()) @db.DateTime(0)
  updatedAt             DateTime?            @default(now()) @db.DateTime(0)
  promotion_criteria    promotion_criteria[]
  services              services?            @relation(fields: [applicableServiceId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_promo_service")

  @@index([applicableServiceId], map: "fk_promo_service")
}

model purchase_items {
  id          String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  purchaseId  String    @map("purchase_id") @db.Char(36)
  assetId     String    @map("asset_id") @db.Char(36)
  quantity    Int
  price       Decimal   @db.Decimal(10, 2)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  assets      assets    @relation(fields: [assetId], references: [id], onUpdate: Restrict, map: "fk_purchaseitem_asset")
  purchases   purchases @relation(fields: [purchaseId], references: [id], onUpdate: Restrict, map: "fk_purchaseitem_purchase")

  @@index([assetId], map: "fk_purchaseitem_asset")
  @@index([purchaseId], map: "fk_purchaseitem_purchase")
}

model purchases {
  id                 String           @id @default(dbgenerated("(uuid())")) @db.Char(36)
  supplierId         String           @map("supplier_id") @db.Char(36)
  totalAmount        Decimal          @map("total_amount") @db.Decimal(10, 2)
  purchaseDate       DateTime         @map("purchase_date") @db.Date
  purchaseStatus     String           @map("purchase_status") @db.VarChar(50)
  paymentStatus      String?          @map("payment_status") @db.VarChar(50)
  proofPaymentPath   String?          @map("proof_payment_path") @db.VarChar(255)
  comments           String?          @db.Text
  createdAt          DateTime?        @default(now()) @db.DateTime(0)
  updatedAt          DateTime?        @default(now()) @db.DateTime(0)
  purchase_items     purchase_items[]
  suppliers          suppliers        @relation(fields: [supplierId], references: [id], onUpdate: Restrict, map: "fk_purchase_supplier")

  @@index([supplierId], map: "fk_purchase_supplier")
}

model salary_payments {
  id                 String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  employeeId         String    @map("employee_id") @db.Char(36)
  amount             Decimal   @db.Decimal(10, 2)
  bonus              Decimal?  @default(0.00) @db.Decimal(10, 2)
  deduction          Decimal?  @default(0.00) @db.Decimal(10, 2)
  paymentDate        DateTime  @map("payment_date") @db.Date
  periodStart        DateTime? @map("period_start") @db.Date
  periodEnd          DateTime? @map("period_end") @db.Date
  proofPaymentPath   String?   @map("proof_payment_path") @db.VarChar(255)
  comments           String?   @db.Text
  createdAt          DateTime? @default(now()) @db.DateTime(0)
  updatedAt          DateTime? @default(now()) @db.DateTime(0)
  employees          employees @relation(fields: [employeeId], references: [id], onUpdate: Restrict, map: "fk_salary_employee")

  @@index([employeeId], map: "fk_salary_employee")
}

model sale_inventory {
  id          String     @id @default(dbgenerated("(uuid())")) @db.Char(36)
  assetId     String     @map("asset_id") @db.Char(36)
  price       Decimal    @db.Decimal(10, 2)
  stock       Int
  supplierId  String?    @map("supplier_id") @db.Char(36)
  comments    String?    @db.Text
  createdAt   DateTime?  @default(now()) @db.DateTime(0)
  updatedAt   DateTime?  @default(now()) @db.DateTime(0)
  assets      assets     @relation(fields: [assetId], references: [id], onUpdate: Restrict, map: "fk_saleinv_asset")
  suppliers   suppliers? @relation(fields: [supplierId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_saleinv_supplier")

  @@unique([supplierId, assetId], map: "supplier_id")
  @@index([assetId], map: "fk_saleinv_asset")
}

model service_registrations {
  id                String              @id @default(dbgenerated("(uuid())")) @db.Char(36)
  clientId          String              @map("client_id") @db.Char(36)
  serviceId         String              @map("service_id") @db.Char(36)
  enrollmentDate    DateTime            @map("enrollment_date") @db.Date
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @default(now()) @db.DateTime(0)
  client_attendance client_attendance[]
  clients           clients             @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_reg_client")
  services          services            @relation(fields: [serviceId], references: [id], onUpdate: Restrict, map: "fk_reg_service")

  @@unique([clientId, serviceId], map: "client_id")
  @@index([serviceId], map: "fk_reg_service")
}

model service_schedules {
  id          String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  serviceId   String    @map("service_id") @db.Char(36)
  weekDay     String    @map("week_day") @db.VarChar(20)
  startTime   DateTime  @db.Time(0)
  endTime     DateTime  @db.Time(0)
  employeeId  String    @map("employee_id") @db.Char(36)
  comments    String?   @db.Text
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  employees   employees @relation(fields: [employeeId], references: [id], onUpdate: Restrict, map: "fk_schedule_employee")
  services    services  @relation(fields: [serviceId], references: [id], onUpdate: Restrict, map: "fk_schedule_service")

  @@index([employeeId], map: "fk_schedule_employee")
  @@index([serviceId], map: "fk_schedule_service")
}

model services {
  id                    String                  @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name                  String                  @unique(map: "name") @db.VarChar(100)
  description           String?                 @db.Text
  cost                  Decimal                 @db.Decimal(10, 2)
  billingPeriod         String                  @db.VarChar(50)
  createdAt             DateTime?               @default(now()) @db.DateTime(0)
  updatedAt             DateTime?               @default(now()) @db.DateTime(0)
  client_payments       client_payments[]
  client_service_levels client_service_levels[]
  promotions            promotions[]
  service_registrations service_registrations[]
  service_schedules     service_schedules[]

  @@index([name], map: "idx_service_name")
}

model suppliers {
  id             String           @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name           String           @unique(map: "name") @db.VarChar(100)
  idNumber       String?          @map("id_number") @db.VarChar(13)
  phone          String?          @db.VarChar(10)
  email          String?          @db.VarChar(100)
  address        String?          @db.Text
  web            String?          @db.VarChar(100)
  whatsapp       String?          @db.VarChar(10)
  city           String?          @db.VarChar(50)
  comments       String?          @db.Text
  createdAt      DateTime?        @default(now()) @db.DateTime(0)
  updatedAt      DateTime?        @default(now()) @db.DateTime(0)
  purchases      purchases[]
  sale_inventory sale_inventory[]

  @@index([name], map: "idx_supplier_name")
}

model survey_questions {
  id            String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  surveyId      String    @map("survey_id") @db.Char(36)
  questionText  String    @map("question_text") @db.Text
  questionType  String    @map("question_type") @db.VarChar(50)
  options       String?   @db.Text
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
  surveys       surveys   @relation(fields: [surveyId], references: [id], onUpdate: Restrict, map: "fk_question_survey")

  @@index([surveyId], map: "fk_question_survey")
}

model survey_responses {
  id           String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  surveyId     String    @map("survey_id") @db.Char(36)
  clientId     String    @map("client_id") @db.Char(36)
  responses    String?   @db.Text
  submittedAt  DateTime? @map("submitted_at") @default(now()) @db.DateTime(0)
  clients      clients   @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_response_client")
  surveys      surveys   @relation(fields: [surveyId], references: [id], onUpdate: Restrict, map: "fk_response_survey")

  @@index([clientId], map: "fk_response_client")
  @@index([surveyId], map: "fk_response_survey")
}

model surveys {
  id                String             @id @default(dbgenerated("(uuid())")) @db.Char(36)
  title             String             @db.VarChar(100)
  description       String?            @db.Text
  googleFormsLink   String?            @map("google_forms_link") @db.VarChar(255)
  active            Boolean          @default(true)
  createdAt         DateTime?          @default(now()) @db.DateTime(0)
  updatedAt         DateTime?          @default(now()) @db.DateTime(0)
  survey_questions  survey_questions[]
  survey_responses  survey_responses[]
}

model users {
  id         String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  username   String    @unique(map: "username") @db.VarChar(50)
  firstName  String    @map("first_name") @db.VarChar(50)
  lastName   String    @map("last_name") @db.VarChar(50)
  email      String    @unique(map: "idx_email") @db.VarChar(100)
  password   String    @db.VarChar(255)
  role       String    @db.VarChar(50)
  status     String   @default("active") @db.VarChar(50)
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
}
